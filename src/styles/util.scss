@use 'sass:map';
@use 'sass:math';

/**
 * General Helpers
 */
// Convert pixels to rems
@function px-to-rem($px) {
  $rems: math.div($px, 16px) * 1rem;
  @return $rems;
}

// Convert pixels to ems
@function px-to-em($px) {
  $rems: math.div($px, 16px) * 1em;
  @return $rems;
}

// Round a number to a given number of decimal places
@function round($number, $decimals: 0) {
  $n: 1;
  @if $decimals > 0 {
    @for $i from 1 through $decimals {
      $n: $n * 10;
    }
  }
  @return math.div(math.round($number * $n), $n);
}

/**
 * Media Queries
 */
$breakpoints: (
  sm: 550px,
  md: 850px,
  lg: 1050px,
  xl: 1350px,
);

@mixin mq($key) {
  $size: map.get($breakpoints, $key);

  @media only screen and (min-width: #{px-to-em($size)}) {
    @content;
  }
}

/**
 * Clamp
 */
// Fluid font size (clamp)
@function fluid(
  $min-size,
  $max-size,
  $min-breakpoint: map.get($breakpoints, md),
  $max-breakpoint: map.get($breakpoints, xl),
  $unit: vw
) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: round($slope * 100, 2);
  $intercept-rem: round(px-to-rem($min-size - $slope * $min-breakpoint), 2);
  $min-size-rem: round(px-to-rem($min-size), 2);
  $max-size-rem: round(px-to-rem($max-size), 2);
  @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}

/**
 * Accessibility
 */
@mixin sr-only {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  -webkit-clip-path: inset(50%) !important;
  clip-path: inset(50%) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
  white-space: nowrap !important;
}
